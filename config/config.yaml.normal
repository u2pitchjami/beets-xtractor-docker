plugins: inline ftintitle discogs bandcamp beatport4 mbsync autogenre lastgenre chroma replaygain keyfinder xtractor lyrics fetchart thumbnails embedart duplicates missing yearfixer scrub permissions convert export hook info fish web 
#bugyplugins : bpsync, acousticbrainz : need url api, badfiles : slowly, autobpm : heavy and xtractor make it, describe, check
directory: /app/data
library: /app/config/collection.blb
threaded: yes
original_date: no
per_disc_numbering: no


include: 
  - beatport_credentials.yaml


web:
    host: 0.0.0.0
    port: 8337

import:
    write: yes
    copy: no
    move: yes
    resume: ask
    incremental: yes
    quiet: yes
    quiet_fallback: skip
    timid: no
    log: /app/config/beet.log

#Path Extensions#####################################################################################

paths:
    default: $albumartist/$original_year - [$i_release_type] ($label) - $album%aunique{albumartist album year, label catalognum}/$disc_and_track - $artist - $album - $title
    singleton: $albumartist/$original_year - [$i_release_type] ($label) - $album%aunique{albumartist album year, label catalognum}/$disc_and_track - $artist - $album - $title
    comp: $albumartist/$original_year - [$i_release_type] ($label) - $album%aunique{albumartist album year, label catalognum}/$disc_and_track - $artist - $album - $title
    albumtype_soundtrack: $albumartist/$original_year - [$i_release_type] ($label) - $album%aunique{albumartist album year, label catalognum}/$disc_and_track - $artist - $album - $title

replace:
    '^\.': ''
    '[\x00-\x1f]': _
    '[<>:"\?\*\|]': ''
    '[\xE8-\xEB]': e
    '[\xEC-\xEF]': i
    '[\xE2-\xE6]': a
    '[\xF2-\xF6]': o
    '[\xF8]': o
    '\.$': ''
    '\s+$': ''

ftintitle:
    auto: yes

#Inline plugin template
item_fields:
   i_release_type: |
    if albumtype == "album":
        return "Album"
    elif albumtype == "single":
        return "Single"
    elif albumtype == "ep":
        return "EP"
    elif albumtype == "compilation":
        return "Compilation"
    elif albumtype == "soundtrack":
        return "Soundtrack"
    elif albumtype == "live":
        return "Live"
    elif albumtype == "broadcast":
        return "Broadcast"
    elif albumtype == "dj-mix":
        return "DJ-Mix"
    elif albumtype == "demo":
        return "Demo"
    elif albumtype == "mixtape/street":
        return "Mixtape"
    elif albumtype == "remix":
        return "Remix"
    else:
        return "Other"
   disc_and_track: |
    if disctotal > 9:
      return u'%02i-%02i'% (disc, track)
    elif disctotal > 1:
      return u'%01i-%02i' % (disc, track)
    elif tracktotal > 99:
      return u'%03i' % (track)
    elif tracktotal > 9:
      return u'%02i' % (track)
    else:
      return u'%01i' % (track)

#Autotagger Extensions###############################################################################

discogs:
  index_tracks: yes
  source_weight: 0.5
  user_token: "czPDufZYLSEdazBpajGMFBZspHdhEVoZxHVyomhO"

bandcamp:
  include_digital_only_tracks: true
  search_max: 2
  art: yes
  comments_separator: "\n---\n"
  truncate_comments: no
  exclude_extra_fields: []
  genre:
    capitalize: no
    maximum: 0
    always_include: []
    mode: progressive # classical, progressive or psychedelic

deezer:
  source_weight: 0.5

beatport4:
  source_weight: 0.5
  art: yes
  art_overwrite: no

bpsync:
  auto: yes

# genre ###############################################################################################

autogenre:
  pretend: false
  all: false
  force: false
  lastgenre: true
  xtractor: true
  from_title: true
  genre_rosamerica_strong: 0.8
  genre_electronic_strong: 0.8
  genre_electronic_prepend: 0.5
  genre_electronic_append: 0.45

lastgenre:
  auto: false
  canonical: /app/config/lastgenre/genres-tree.yaml
  count: 4
  fallback: None
  force: no
  min_weight: 15
  prefer_specific: true
  source: album
  separator: ', '
  whitelist: /app/config/lastgenre/genres.txt
  title_case: yes

# analyze #############################################################################################

acousticbrainz:
    auto: no
    force: no
    base_url: "htpps://acousticbrainz.org"

chroma:
    auto: no

#autobpm:
#  auto: yes
#  overwrite: no

replaygain:
    auto: yes
    backend: ffmpeg

keyfinder:
  auto: yes
  bin: keyfinder-camelot.sh
  overwrite: yes
  loglevel: DEBUG

xtractor:
  auto: no
  dry-run: no
  write: yes
  threads: 4
  force: no
  quiet: no
  keep_output: no
  keep_profiles: no
  low_level_targets:
    bpm:
      path: "rhythm.bpm"
      type: integer
      required: yes
    danceability:
      path: "rhythm.danceability"
      type: float
    beats_count:
      path: "rhythm.beats_count"
      type: integer
    average_loudness:
      path: "lowlevel.average_loudness"
      type: float
      required: yes
  high_level_targets:
    danceable:
      path: "highlevel.danceability.all.danceable"
      type: float
      required: yes
    gender:
      path: "highlevel.gender.value"
      type: string
      required: yes
    is_male:
      path: "highlevel.gender.all.male"
      type: float
    is_female:
      path: "highlevel.gender.all.female"
      type: float
    genre_rosamerica:
      path: "highlevel.genre_rosamerica.value"
      type: string
      required: yes
    voice_instrumental:
      path: "highlevel.voice_instrumental.value"
      type: string
      required: yes
    is_voice:
      path: "highlevel.voice_instrumental.all.voice"
      type: float
    is_instrumental:
      path: "highlevel.voice_instrumental.all.instrumental"
      type: float
    mood_acoustic:
      path: "highlevel.mood_acoustic.all.acoustic"
      type: float
      required: yes
    mood_aggressive:
      path: "highlevel.mood_aggressive.all.aggressive"
      type: float
      required: yes
    mood_electronic:
      path: "highlevel.mood_electronic.all.electronic"
      type: float
      required: yes
    mood_happy:
      path: "highlevel.mood_happy.all.happy"
      type: float
      required: yes
    mood_sad:
      path: "highlevel.mood_sad.all.sad"
      type: float
      required: yes
    mood_party:
      path: "highlevel.mood_party.all.party"
      type: float
      required: yes
    mood_relaxed:
      path: "highlevel.mood_relaxed.all.relaxed"
      type: float
      required: yes
    # mirex
    mood_mirex:
      path: "highlevel.moods_mirex.value"
      type: string
      required: yes
    mood_mirex_cluster_1:
      path: "highlevel.moods_mirex.all.Cluster1"
      type: float
    mood_mirex_cluster_2:
      path: "highlevel.moods_mirex.all.Cluster2"
      type: float
    mood_mirex_cluster_3:
      path: "highlevel.moods_mirex.all.Cluster3"
      type: float
    mood_mirex_cluster_4:
      path: "highlevel.moods_mirex.all.Cluster4"
      type: float
    mood_mirex_cluster_5:
      path: "highlevel.moods_mirex.all.Cluster5"
      type: float
  output_path: /app/config/xtraction_data
  essentia_extractor: /usr/local/bin/essentia_streaming_extractor_music
  extractor_profile:
    outputFormat: json
    outputFrames: 0
    lowlevel:
      frameSize: 2048
      hopSize: 1024
    highlevel:
      compute: 1
      svm_models:
        - /app/config/svm_models/danceability.history
        - /app/config/svm_models/gender.history
        - /app/config/svm_models/genre_dortmund.history
        - /app/config/svm_models/genre_electronic.history
        - /app/config/svm_models/genre_rosamerica.history
        - /app/config/svm_models/genre_tzanetakis.history
        - /app/config/svm_models/ismir04_rhythm.history
        - /app/config/svm_models/mood_acoustic.history
        - /app/config/svm_models/mood_aggressive.history
        - /app/config/svm_models/mood_electronic.history
        - /app/config/svm_models/mood_happy.history
        - /app/config/svm_models/mood_sad.history
        - /app/config/svm_models/mood_party.history
        - /app/config/svm_models/mood_relaxed.history
        - /app/config/svm_models/timbre.history
        - /app/config/svm_models/tonal_atonal.history
        - /app/config/svm_models/voice_instrumental.history
        - /app/config/svm_models/moods_mirex.history
  chromaprint:
    compute: 0

# lyrics ########################################################################################

lyrics:
  auto: no                  # Fetch lyrics automatically during import. Default: yes.
  fallback: ''               # By default, the file will be left unchanged when no lyrics are found.
                             # Use the empty string '' to reset the lyrics in such a case.
                             # Default: None.
  force: no                  # By default, beets won’t fetch lyrics if the files already have ones.
                             # To instead always fetch lyrics, set the force option to yes.
                             # Default: no.
#google_API_key: None      # Your Google API key (to enable the Google Custom Search backend).
                             # Default: None.
  #google_engine_ID:         # The custom search engine to use.
                             # Default: The beets custom search engine, which gathers an updated list of sources known to be scrapeable.
  sources:                   # List of sources to search for lyrics.
                             # An asterisk * expands to all available sources.
                             # Both it and the genius source will only be enabled if BeautifulSoup is installed.
    - bandcamp               # ToDo: Not shure if this entry is really nescessary.
    - genius
    - lyricwiki
    - google                 # The google source will be automatically deactivated if no google_API_key is setup.
    - musixmatch             # Possibly just 30% of a whole song text

# Pictures ########################################################################################

# In Roon, all the images embedded in the file tags, are stored next to the audio files or
# stored in a folder called artwork or scans next to the files are displayed.
# This includes all images that include cover, front or folder.

art_filename: cover          # When importing album art, the name of the file (without extension) where the cover art image should be placed.
                             # This is a template string, so you can use any of the syntax available to Path Formats.

copyartifacts:
    extensions: .jpg .pdf .png
    print_ignored: yes

fetchart:
  auto: yes                  # Enable automatic album art fetching during import.
  cautious: no               # Pick only trusted album art by ignoring filenames that do not contain one of the keywords in "cover_names".
  enforce_ratio: yes         # Only allow images with 1:1 aspect ratio
  minwidth: 1000             # Only images with a width bigger or equal to minwidth are considered as valid album art candidates.
  maxwidth: 3000             # A maximum image width to downscale fetched images if they are too big.
                             # The height is recomputed so that the aspect ratio is preserved.
  sources:                   # An asterisk * expands to all available sources.
    - filesystem             # No remote art sources are queried if local art is found in the filesystem.
    - coverart
    - albumart
    - fanarttv
    - bandcamp
  fanarttv_key: 95d2c9470e7289c1aa94e83cb0a3e20a     # API key to use for the fanart API.
  store_source: yes          # Store the art source (e.g. filesystem) in the beets database as art_source.

thumbnails:
  auto: yes
  force: no
  dolphin: no  

embedart:
  auto: yes                   # Enable automatic album art embedding.
  compare_threshold: 50      # A threshold of 0 (the default) disables similarity checking and always embeds new images.
                             # Recommended between 10 and 100.
                             # The smaller the threshold number, the more similar the images must be.
  ifempty: yes               # Avoid embedding album art for files that already have art embedded.
  maxwidth: 0                # A maximum width to downscale images before embedding them (the original image file is not altered).
                             # The resize operation reduces image width to at most maxwidth pixels.
                             # The height is recomputed so that the aspect ratio is preserved. See also Image Resizing for further caveats about >
  remove_art_file: no        # Automatically remove the album art file for the album after it has been embedded.
                             # This option is best used alongside the FetchArt plugin to download art with the purpose
                             # of directly embedding it into the file’s metadata without an “intermediate” album art file.

# Maintanance #####################################################################################

duplicates:
  album: no                  # List duplicate albums instead of tracks. Default: no.
  checksum: ffmpeg -i {file} -f crc -
                             # Use an arbitrary command to compute a checksum of items.
                             # This overrides the keys option the first time it is run;
                             # however, because it caches the resulting checksum as flexattrs in the database,
                             # you can use --key=name_of_the_checksumming_program --key=any_other_keys
                             # (or set the keys configuration option) the second time around.
                             # Default: ffmpeg -i {file} -f crc -.
  copy: none                 # A destination base directory into which to copy matched items.
                             # Default: none (disabled).
  count: yes                 # Print a count of duplicate tracks or albums in the format
                             # $albumartist - $album - $title: $count (for tracks)
                             # or
                             # $albumartist - $album: $count (for albums).
                             # Default: no.
  delete: no                 # Removes matched items from the library and from the disk. Default: no
  format: format_item        # A specific format with which to print every track or album.
                             # This uses the same template syntax as beets’ path formats.
                             # The usage is inspired by, and therefore similar to, the list command.
                             # Default: format_item
  full: yes                  # List every track or album that has duplicates, not just the duplicates themselves. Default: no
  keys: [mb_trackid, mb_albumid]
                             # Define in which track or album fields duplicates are to be searched.
                             # By default, the plugin uses the musicbrainz track and album IDs for this purpose.
                             # Using the keys option (as a YAML list in the configuration file,
                             # or as space-delimited strings in the command-line),
                             # you can extend this behavior to consider other attributes.
                             # Default: [mb_trackid, mb_albumid]
  merge: no                  # Merge duplicate items by consolidating tracks and/or metadata where possible.
  move: none                 # A destination base directory into which it will move matched items. Default: none (disabled).
  path: no                   # Output the path instead of metadata when listing duplicates. Default: no.
  strict: no                 # Do not report duplicate matches if some of the attributes are not defined (ie. null or empty). Default: no
  #tag: no                   # A key=value pair.
                             # The plugin will add a new key attribute with value value as a flexattr to the database for duplicate items. Default: no.
  tiebreak: {}               # Dictionary of lists of attributes keyed by items or albums to use when choosing duplicates.
                             # By default, the tie-breaking procedure favors the most complete metadata attribute set.
                             # If you would like to consider the lower bitrates as duplicates, for example, set tiebreak: items: [bitrate].
                             # Default: {}.

check:
  import: no                 # This also disables integrity checks on import and will not ask you to skip the import of corrupted files.
  write-check: yes           # Verify checksums before writing files with beet write or beet modify.
  write-update: yes          # Update checksums after writing files with beet write or beet modify.
  convert-update: no         # Update the checksum if a file has been converted with the --keep-new flag.
  threads: 1                 # Threads to compute checksums.

missing:
  #format: $albumartist - $album - $title
                             # A specific format with which to print every track.
                             # This uses the same template syntax as beets’ path formats.
                             # The usage is inspired by, and therefore similar to, the list command.
                             # Default: format_item.
  count: yes                 # Print a count of missing tracks per album, with format defaulting to $albumartist - $album: $missing.
                             # Default: no.
  total: yes                 # Print a single count of missing tracks in all albums.
                             # Default: no.

badfiles:
    check_on_import: no

yearfixer:
    force: yes

scrub:
    auto: yes

# Export ##########################################################################################

permissions: # octal modes   # Maybe nescessary for smb shares like ROCK or NAS drives.
  file: 775
  dir: 775

convert:
    auto: no
    ffmpeg: /usr/bin/ffmpeg
    opts: -ab 320k -ac 2 -ar 48000
    max_bitrate: 320
    threads: 1

export:
    json:
        formatting:
            ensure_ascii: false
            indent: 4
            separators: [',' , ': ']
            sort_keys: true
    csv:
        formatting:
            delimiter: ','
            dialect: excel

###################################################################################################

# UI ##############################################################################################

verbose: no

ui:
    color: yes
    colors:
        text_success: ['bold', 'green']
        text_warning: ['bold', 'yellow']
        text_error: ['bold', 'red']
        text_highlight: ['bold', 'red']
        text_highlight_minor: ['white']
        action_default: ['bold', 'cyan']
        action: ['bold', 'cyan']
        # New colors after UI overhaul
        text: ['normal']
        text_faint: ['faint']
        import_path: ['bold', 'blue']
        import_path_items: ['bold', 'blue']
        added:   ['green']
        removed: ['red']
        changed: ['yellow']
        added_highlight:   ['bold', 'green']
        removed_highlight: ['bold', 'red']
        changed_highlight: ['bold', 'yellow']
        text_diff_added:   ['bold', 'red']
        text_diff_removed: ['bold', 'red']
        text_diff_changed: ['bold', 'red']
        action_description: ['white']

hook:
  hooks:
    #############################################
    - event: album_imported
      command: echo "\"{album}\""
    - event: import
      command: echo "imported from {paths}"
    #############################################
    - event: art_set
      command: echo "Coverart saved"
    - event: import_begin
      command: echo "Roon import started..."
    - event: import_task_apply
      command: echo "Metadata applied"
    - event: item_copied
      command: echo "\"{item}\" copied from \"{source}\" to \"{destination}\""
    - event: item_moved
      command: echo "Moved \"{item}\""
    - event: write
      command: echo "Writing to {path}"
    - event: cli_exit
      command: echo "All tasks finished!"
